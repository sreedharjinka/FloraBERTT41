#Commands to dowload 26 NAM + B73v5 reference genomes, convert gff3 annotations to gtf, and build HiSat2 indices for RNAseq alignment 


#create a two column file with the genome and annotation names and call it input_genome_names.txt:
Zm-B73-REFERENCE-NAM-5.0	Zm00001eb.1
Zm-B97-REFERENCE-NAM-1.0	Zm00018ab.1
Zm-CML52-REFERENCE-NAM-1.0	Zm00019ab.1
Zm-CML69-REFERENCE-NAM-1.0	Zm00020ab.1
Zm-CML103-REFERENCE-NAM-1.0	Zm00021ab.1
Zm-CML228-REFERENCE-NAM-1.0	Zm00022ab.1
Zm-CML247-REFERENCE-NAM-1.0	Zm00023ab.1
Zm-CML277-REFERENCE-NAM-1.0	Zm00024ab.1
Zm-CML322-REFERENCE-NAM-1.0	Zm00025ab.1
Zm-CML333-REFERENCE-NAM-1.0	Zm00026ab.1
Zm-HP301-REFERENCE-NAM-1.0	Zm00027ab.1
Zm-Il14H-REFERENCE-NAM-1.0	Zm00028ab.1
Zm-Ki3-REFERENCE-NAM-1.0	Zm00029ab.1
Zm-Ki11-REFERENCE-NAM-1.0	Zm00030ab.1
Zm-Ky21-REFERENCE-NAM-1.0	Zm00031ab.1
Zm-M37W-REFERENCE-NAM-1.0	Zm00032ab.1
Zm-M162W-REFERENCE-NAM-1.0	Zm00033ab.1
Zm-Mo18W-REFERENCE-NAM-1.0	Zm00034ab.1
Zm-Ms71-REFERENCE-NAM-1.0	Zm00035ab.1
Zm-NC350-REFERENCE-NAM-1.0	Zm00036ab.1
Zm-NC358-REFERENCE-NAM-1.0	Zm00037ab.1
Zm-Oh7B-REFERENCE-NAM-1.0	Zm00038ab.1
Zm-Oh43-REFERENCE-NAM-1.0	Zm00039ab.1
Zm-P39-REFERENCE-NAM-1.0	Zm00040ab.1
Zm-Tx303-REFERENCE-NAM-1.0	Zm00041ab.1
Zm-Tzi8-REFERENCE-NAM-1.0	Zm00042ab.1

#download gffread if you ned to convert from  gff to gtf
wget http://ccb.jhu.edu/software/stringtie/dl/gffread-0.12.3.Linux_x86_64.tar.gz
tar -xvzf gffread-0.12.3.Linux_x86_64.tar.gz
rm gffread-0.12.3.Linux_x86_64.tar.gz

mkdir align_against_NAM_genomes
cd align_against_NAM_genomes
mkdir ref_files
cd ref_files

while read -r first second; do 
    wget https://download.maizegdb.org/"$first"/"$first".fa.gz &
    wget https://download.maizegdb.org/"$first"/"$first".md5 &
    wget https://download.maizegdb.org/"$first"/"$first"_"$second".gff3.gz
    gunzip "$first"_"$second".gff3.gz
    gunzip "$first".fa.gz &
    ../../gffread-0.12.3.Linux_x86_64/gffread "$first"_"$second".gff3 -T -o "$first"_"$second".gtf
done < input_genome_names.txt


#Pull the docker image from ecr that contains HiSat2 and start it interactively
$(aws ecr get-login --no-include-email --region us-east-1)
docker pull 335777049998.dkr.ecr.us-east-1.amazonaws.com/inari-rnaseq-jupyter:1.3
docker tag 335777049998.dkr.ecr.us-east-1.amazonaws.com/inari-rnaseq-jupyter:1.3 rnaseq

docker run -it -v ~:/home/ubuntu rnaseq

#navigate to the direcory that contains the NAM genomes and annotations
cd align_against_NAM_genomes
mkdir indices
cd indices

#extract splice sites and exons and create HiSat alignment indices
while read -r first second; do 
	hisat2_extract_splice_sites.py ../ref_files/"$first"_"$second".gtf > "$first"_"$second".ss
    hisat2_extract_exons.py ../ref_files/"$first"_"$second".gtf > "$first"_"$second".exon
    hisat2-build --ss "$first"_"$second".ss --exon "$first"_"$second".exon ../ref_files/"$first".fa "$first"_"$second"
done < ../ref_files/input_genome_names.txt


#extract splice sites and exons and create HiSat alignment indices
while read -r first second; do 
	#hisat2_extract_splice_sites.py "$first"_"$second".gtf > "$first"_"$second".ss
    #hisat2_extract_exons.py "$first"_"$second".gtf > "$first"_"$second".exon
    hisat2-build --ss "$first"_"$second".ss --exon "$first"_"$second".exon "$first".fa "$first"_"$second"
done < input_genome_names.txt


#create sample lists and run alignment_script.sh as described in the commnets at the start of alignmnet_script.sh

#Collect samples which succeeded after the first round 
#(these had a read count summary file and non 0 aligned reads)
grep 'Assigned'  read_count/*.summary* | sed 's/read_count\///g' | grep -v 'Assigned  0'| sed 's/.count.*//g' > samples_w_greater_than_0_assigned_reads_after_round_1.txt 
#make an input file of only those samples that did not produced non 0 counts of assigned reads in the count summary flie
grep -v -f samples_w_greater_than_0_assigned_reads_after_round_1.txt full_sample_list > failed_sample_list_from_round1
